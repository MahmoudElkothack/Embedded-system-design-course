<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.4" links="0">
 <framework name="qpn"/>
 <package name="HSMs" stereotype="0x02">
  <class name="Clock_Alarm" superclass="qpn::QHsm">
   <attribute name="Cur_Time" type="uint32_t" visibility="0x02" properties="0x01"/>
   <attribute name="temp_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_status" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="time_mode" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="obj" type="Clock_Alarm" visibility="0x02" properties="0x01"/>
   <attribute name="super" type="QHsm*" visibility="0x02" properties="0x01">
    <code>=&amp;Clock_Alarm_obj.super;</code>
   </attribute>
   <attribute name="temp_format" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="temp_digit" type="uint8_t" visibility="0x02" properties="0x00"/>
   <operation name="Get_Cur_Time" type="uint32_t" visibility="0x00" properties="0x01">
    <documentation>This Return Cur Time</documentation>
    <code>  uint8_t save_Reg=SREG;
    uint32_t temp;
        cli();
        temp = Clock_Alarm_Get_Cur_Time();
        SREG = save_Reg;
        sei();
        return temp;</code>
   </operation>
   <operation name="Update_Cur_Time" type="void" visibility="0x00" properties="0x01">
    <code>   
if((++Clock_Alarm_Cur_Time) == MAX_TIME)
{
  Clock_Alarm_Cur_Time=0;
 }</code>
   </operation>
   <operation name="Set_Cur_Time" type="void" visibility="0x02" properties="0x01">
    <parameter name="new_cur_time" type="uint32_t"/>
    <code>  uint8_t save_Reg=SREG;
    cli();
    Clock_Alarm_Cur_Time = new_cur_time ;
    SREG = save_Reg;
    sei();
</code>
   </operation>
   <operation name="display_curr_time" type="void" visibility="0x00" properties="0x00">
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>String time_as_string;
    uint32_t time_;

    uint32_t time24h = Clock_Alarm_Get_Cur_Time()/10; //convert to number of seconds 
    uint8_t ss = time24h % 10U;       //extract sub-second to append later

    time_ = (me-&gt;time_mode == MODE_24H)?time24h:convert_24hformat_to_12h(time24h);
    time_as_string = integertime_to_string(time_); //hh:mm:ss
    time_as_string.concat('.');
    time_as_string.concat(ss);

    /*if mode is 12H , concatenate  am/pm information */
    if(me-&gt;time_mode == MODE_12H){
        time_as_string.concat(' ');
        time_as_string.concat(get_am_or_pm(time24h));
    }

    display_write(time_as_string,row,col);</code>
   </operation>
   <operation name="display_clock_setting_time" type="void" visibility="0x00" properties="0x00">
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>
    String time_as_string;

    time_as_string = integertime_to_string(me-&gt;temp_time); //hh:mm:ss

    /*concatenate  am/pm information */
    if(me-&gt;temp_format != FORMAT_24H){
        time_as_string.concat(' ');
        if(me-&gt;temp_format == FORMAT_AM)
            time_as_string.concat(&quot;AM&quot;);
        else
            time_as_string.concat(&quot;PM&quot;);
    }

    display_write(time_as_string,row,col);
</code>
   </operation>
   <statechart properties="0x00">
    <initial target="../1/2">
     <action>Clock_Alarm_Set_Cur_Time(initial_cur_time);
me-&gt;alarm_time= initial_alarm_time;
me-&gt;time_mode=MODE_12H;
me-&gt;alarm_status=ALARM_OFF;
</action>
     <initial_glyph conn="2,31,5,3,9,10,3">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Clock">
     <history type="deep" target="../2">
      <history_glyph conn="8,51,3,3,2,-7,4"/>
     </history>
     <tran trig="Alarm" target="../../2">
      <tran_glyph conn="52,77,2,0,10,7,7">
       <action box="0,0,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Ticking">
      <entry>Clock_Alarm_display_curr_time(me,TICKING_CUR_TIME_ROW,TICKING_CUR_TIME_COL);</entry>
      <exit>display_clear();</exit>
      <tran trig="Set" target="../../3/2">
       <action>me-&gt;temp_time = Clock_Alarm_Get_Cur_Time()/10;
if(me-&gt;time_mode == MODE_12H){
    if(get_am_or_pm(me-&gt;temp_time).equals(&quot;AM&quot;)){
        me-&gt;temp_format = FORMAT_AM;
    }
    else{
        me-&gt;temp_format = FORMAT_PM;
    }
    me-&gt;temp_time = convert_24hformat_to_12h(me-&gt;temp_time);
}
else
    me-&gt;temp_format = FORMAT_24H;</action>
       <tran_glyph conn="39,38,1,3,20,4,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ok" target="../../3/3">
       <tran_glyph conn="39,39,1,3,5,6,15,25,15">
        <action box="-1,0,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="TICK">
       <action>Clock_Alarm_display_curr_time(me,TICKING_CUR_TIME_ROW,TICKING_CUR_TIME_COL);</action>
       <tran_glyph conn="14,38,3,-1,9,3">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="14,30,25,18">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="Setting">
      <exit>display_clear();</exit>
      <tran trig="ABRT" target="../../2">
       <tran_glyph conn="50,55,3,2,-20,-7">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ok" target="../../2">
       <tran_glyph conn="50,59,3,2,-27,-11">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="Clock_Setting">
       <entry> Clock_Alarm_display_clock_setting_time(me,Clock_setting_time_row,Clock_setting_time_col);
display_cursor_on_blinkon();






</entry>
       <initial target="../1">
        <initial_glyph conn="67,46,5,3,-1,-6,4">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <state name="CS_hour_d1">
        <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_HOUR_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="Set">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 3;
me-&gt;temp_time -=  DIGIT1(GET_HOUR(me-&gt;temp_time)) * 10UL * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL ) * 3600UL;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_HOUR_D2_COL);</action>
         <tran_glyph conn="70,41,3,-1,6,1">
          <action box="0,0,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="ok" target="../../6">
         <tran_glyph conn="84,41,1,3,5">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="70,37,14,10">
         <entry box="1,2,7,2"/>
        </state_glyph>
       </state>
       <state name="CS_Min_d1">
        <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_MIN_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="Set">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) * 10UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL ) * 60UL;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_MIN_D1_COL);</action>
         <tran_glyph conn="108,42,3,-1,5,1">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="ok" target="../../7">
         <tran_glyph conn="119,41,1,3,6,1,3">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="108,37,11,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Sec_d1">
        <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_SEC_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="Set">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) * 10UL;
me-&gt;temp_time += (me-&gt;temp_digit ) * 10UL;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_SEC_D1_COL);</action>
         <tran_glyph conn="141,56,1,-1,-6,1">
          <action box="-4,1,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="ok" target="../../4">
         <tran_glyph conn="127,55,3,1,-3,1,-2">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="127,51,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Sec_d2">
        <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_SEC_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="Set">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) ;
me-&gt;temp_time += (me-&gt;temp_digit ) ;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_SEC_D2_COL);</action>
         <tran_glyph conn="122,55,1,-1,-5,1">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="ok" target="../../5">
         <tran_glyph conn="109,56,3,1,-6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="109,52,13,6">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Format">
        <tran trig="Set">
         <tran_glyph conn="103,55,1,-1,-6,1">
          <action box="-3,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="ok">
         <choice target="../../../8">
          <guard>is_time_set_error(me-&gt;temp_time,me-&gt;temp_format)</guard>
          <choice_glyph conn="84,55,5,1,-8">
           <action box="-9,-7,22,4"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="89,55,3,-1,-5">
          <action box="-3,1,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="89,52,14,6"/>
       </state>
       <state name="CS_hour_d2">
        <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_HOUR_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="Set">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_HOUR(me-&gt;temp_time)) * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit ) * 3600UL;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_HOUR_D2_COL);</action>
         <tran_glyph conn="89,40,3,-1,2,1,3,2">
          <action box="1,2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="ok" target="../../2">
         <tran_glyph conn="100,41,1,3,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="89,37,11,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_Min_d2">
        <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_MIN_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="Set">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit ) * 60UL;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_MIN_D2_COL);</action>
         <tran_glyph conn="128,40,3,-1,4,1">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="ok" target="../../3">
         <tran_glyph conn="139,41,1,1,4,14,-2">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="128,37,11,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="CS_error">
        <tran trig="Set">
         <tran_glyph conn="76,54,1,-1,-6,1">
          <action box="-3,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="62,51,14,6"/>
       </state>
       <state_glyph node="61,34,88,27">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="Alarm_Setting">
       <smstate name="state1" submachine="../../../../4">
        <smstate_glyph node="80,66,14,6"/>
       </smstate>
       <state_glyph node="74,63,46,11"/>
      </state>
      <state_glyph node="50,30,102,45">
       <exit box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="8,24,155,53"/>
    </state>
    <state name="Alarm_Notify">
     <tran trig="ok" target="../../1" cpref="../../1/0">
      <tran_glyph conn="54,99,3,3,-51,-48,4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="54,94,17,10"/>
    </state>
    <submachine name="">
     <submachine_diagram size="75,45"/>
    </submachine>
    <submachine name="Clock_Setting">
     <entry> Clock_Alarm_display_clock_setting_time(me,Clock_setting_time_row,Clock_setting_time_col);
display_cursor_on_blinkon();






</entry>
     <initial target="../1">
      <initial_glyph conn="8,14,5,3,-1,-6,4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="CS_hour_d1">
      <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_HOUR_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_HOUR(me-&gt;temp_time));</entry>
      <tran trig="Set">
       <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 3;
me-&gt;temp_time -=  DIGIT1(GET_HOUR(me-&gt;temp_time)) * 10UL * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL ) * 3600UL;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_HOUR_D2_COL);</action>
       <tran_glyph conn="11,9,3,-1,6,1">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ok" target="../../6">
       <tran_glyph conn="25,9,1,3,5">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="11,5,14,10">
       <entry box="1,2,7,2"/>
      </state_glyph>
     </state>
     <state name="CS_Min_d1">
      <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_MIN_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_MIN(me-&gt;temp_time));</entry>
      <tran trig="Set">
       <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) * 10UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL ) * 60UL;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_MIN_D1_COL);</action>
       <tran_glyph conn="49,10,3,-1,5,1">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ok" target="../../7">
       <tran_glyph conn="60,9,1,3,6,1,3">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="49,5,11,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="CS_Sec_d1">
      <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_SEC_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_SEC(me-&gt;temp_time));</entry>
      <tran trig="Set">
       <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) * 10UL;
me-&gt;temp_time += (me-&gt;temp_digit ) * 10UL;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_SEC_D1_COL);</action>
       <tran_glyph conn="82,24,1,-1,-6,1">
        <action box="-4,1,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ok" target="../../4">
       <tran_glyph conn="68,23,3,1,-3,1,-2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="68,19,14,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="CS_Sec_d2">
      <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_SEC_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_SEC(me-&gt;temp_time));</entry>
      <tran trig="Set">
       <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) ;
me-&gt;temp_time += (me-&gt;temp_digit ) ;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_SEC_D2_COL);</action>
       <tran_glyph conn="63,23,1,-1,-5,1">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ok" target="../../5">
       <tran_glyph conn="50,24,3,1,-6">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="50,20,13,6">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="CS_Format">
      <tran trig="Set">
       <tran_glyph conn="44,23,1,-1,-6,1">
        <action box="-3,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ok">
       <choice target="../../../8">
        <guard>is_time_set_error(me-&gt;temp_time,me-&gt;temp_format)</guard>
        <choice_glyph conn="25,23,5,1,-8">
         <action box="-9,-7,22,4"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="30,23,3,-1,-5">
        <action box="-3,1,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="30,20,14,6"/>
     </state>
     <state name="CS_hour_d2">
      <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_HOUR_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_HOUR(me-&gt;temp_time));</entry>
      <tran trig="Set">
       <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_HOUR(me-&gt;temp_time)) * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit ) * 3600UL;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_HOUR_D2_COL);</action>
       <tran_glyph conn="30,8,3,-1,2,1,3,2">
        <action box="1,2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ok" target="../../2">
       <tran_glyph conn="41,9,1,3,8">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="30,5,11,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="CS_Min_d2">
      <entry>display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_MIN_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
      <tran trig="Set">
       <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit ) * 60UL;
Clock_Alarm_display_clock_setting_time(me,0,2);
display_set_cursor(Clock_setting_time_row,CLOCK_SETTING_TIME_MIN_D2_COL);</action>
       <tran_glyph conn="69,8,3,-1,4,1">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="ok" target="../../3">
       <tran_glyph conn="80,9,1,1,4,14,-2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="69,5,11,8">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="CS_error">
      <tran trig="Set">
       <tran_glyph conn="17,22,1,-1,-6,1">
        <action box="-3,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="3,19,14,6"/>
     </state>
     <submachine_diagram size="88,27">
      <entry box="1,2,6,2"/>
     </submachine_diagram>
    </submachine>
    <state_diagram size="210,126"/>
   </statechart>
  </class>
  <operation name="Clock_Alarm_Ctor" type="void" visibility="0x00" properties="0x00">
   <code>QHsm_ctor(&amp;Clock_Alarm_obj.super, Q_STATE_CAST(&amp;Clock_Alarm_initial));</code>
  </operation>
  <operation name="display_cursor_on_blinkon" type="void" visibility="0x00" properties="0x00">
   <code>lcd_cursor_show();
lcd_cursor_blink();</code>
  </operation>
  <directory name="../src">
   <file name="Clock_Alarm_SM.cpp">
    <text>#include&lt;Arduino.h&gt;
#include&quot;qpn.h&quot;
#include&quot;Clock_Alarm_SM.h&quot;
#include&quot;lcd.h&quot;

$declare${HSMs::Clock_Alarm}
$define${HSMs::Clock_Alarm_Ctor}
//prototypes of helper functions
String get_am_or_pm(uint32_t time24h);
void display_write(String str_, uint8_t r, uint8_t c);
String integertime_to_string(uint32_t time_);
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm);
uint32_t convert_24hformat_to_12h(uint32_t time24h);
void display_cursor_on_blinkon(void);
void display_cursor_off_blinkoff();
void display_set_cursor(uint8_t r, uint8_t c);
void display_clear(void);
bool is_time_set_error(uint32_t time_, time_format_t format);
void display_erase_block(uint8_t row,uint8_t col_start,uint8_t col_stop);

$define${HSMs::Clock_Alarm}



ISR(TIMER1_COMPA_vect){
 Clock_Alarm_Update_Cur_Time();

}





/*
 * Description : Decodes AM/PM information from given time in 24H format
 * param1: Integer time in 24H format
 * return : A string value(&quot;AM&quot; or &quot;PM&quot;)
 */
String get_am_or_pm(uint32_t time24h){
    String ampm;
    uint8_t h = GET_HOUR(time24h);
    if(h == 0U){
        ampm = &quot;AM&quot;;
    }else if( h &gt; 12U){
        ampm = &quot;PM&quot;;
    }else if (h == 12U)
        ampm = &quot;PM&quot;;
    else
        ampm = &quot;AM&quot;;
    return ampm;
}

/*
 * Description: Writes a message to the LCD at given row and column number
 * param1 : Message to write in 'String' format
 * param2 : row number of the LCD
 * param2 : column number of the LCD
 */
void  display_write(String str_, uint8_t r, uint8_t c){
    lcd_set_cursor(c,r);
    lcd_print_string(str_);
}

/*
 * Description: converts an 'integer' time to 'String' time
 * param1 : time represented in terms of number of seconds
 * return : time as 'String' value in the format HH:MM:SS
 */
String integertime_to_string(uint32_t time_){
    uint8_t h,m,s;
    char buf[10]; //00:00:00+null
    h = GET_HOUR(time_); /* Extract how many hours the 'time_' represent */
    m = GET_MIN(time_);  /* Extract how many minutes the 'time_' represent */
    s = GET_SEC(time_);	 /* Extract how many seconds the 'time_' represent */
    sprintf(buf,&quot;%02d:%02d:%02d&quot;,h,m,s);
    return (String)buf;
}

/*
 * Description: Converts given integer time in 12H format to integer time 24H format
 * param1 : Integer time in 12H format
 * param2 : time format of type time_format_t
 * return : Integer time in 24H format
 */
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm){
    uint8_t hour;
    uint32_t time24h;
    hour = GET_HOUR(time12h);
    if(ampm == FORMAT_AM){
        time24h = (hour == 12)? (time12h-(12UL * 3600UL)) : time12h;
    }else{
        time24h = (hour == 12)? time12h : (time12h +(12UL * 3600UL));
    }
    return time24h;
}

/*
 * Description: Converts given integer time in 24H format to integer time 12H format
 * param1 : Integer time in 24H format
 * return : Integer time in 12H format
 */
uint32_t convert_24hformat_to_12h(uint32_t time24h){
    uint8_t hour;
    uint32_t time12h;
    hour = GET_HOUR(time24h);

    if(hour == 0)
        time12h = time24h + (12UL * 3600UL);
    else{
        if((hour &lt; 12UL) || (hour == 12UL))
            return time24h;
        else
            time12h = time24h - (12UL * 3600UL);
    }
    return time12h;
}

void display_cursor_on_blinkon(void){
    lcd_cursor_show();
    lcd_cursor_blink();
}

void display_set_cursor(uint8_t r, uint8_t c){
     lcd_set_cursor(c,r);
}


void display_cursor_off_blinkoff(){
    lcd_cursor_off();
    lcd_cursor_blinkoff();
}

void display_clear(void){
    lcd_clear();
}

bool is_time_set_error(uint32_t time_,time_format_t format){
    uint8_t h = GET_HOUR(time_);
    return ((h &gt; 23) || ((h &gt; 12 || (h == 0))&amp;&amp; format != FORMAT_24H) );
}


void display_erase_block(uint8_t row,uint8_t col_start,uint8_t col_stop)
{
    uint8_t len = col_stop - col_start;
    do{
        lcd_set_cursor(col_start++,row);
        lcd_print_char(' ');
    }while(len--);
}
</text>
   </file>
   <file name="Clock_Alarm_SM.h">
    <text>#ifndef Clock_Alarm_H__
#define Clock_Alarm_H__
enum Clock_Alarm_sig{

ok_SIG = Q_USER_SIG,
Set_SIG,
ABRT_SIG,
Alarm_SIG,
TICK_SIG,
MAX_SIG




};
enum alarm_status{
ALARM_OFF,
ALARM_ON
};

enum time_mode{
    MODE_24H,
    MODE_12H
};

typedef enum time_format{
    FORMAT_24H,
    FORMAT_AM,
    FORMAT_PM
}time_format_t;

#define GET_HOUR(seconds)     (seconds/3600UL)
#define GET_MIN(seconds)      ((seconds/60UL)%60UL)
#define GET_SEC(seconds)      (seconds % 60UL)
#define DIGIT1(d)             (d/10U)
#define DIGIT2(d)             (d%10U)


#define MAX_TIME 864000 //24 H 60M 60S (100*10 =1S)
#define   initial_cur_time (((10*3600) + (10*60) + 10 ) *10)
#define   initial_alarm_time ((8*3600) *10)
#define TICKING_CUR_TIME_ROW 0
#define TICKING_CUR_TIME_COL 3
#define Clock_setting_time_row 0
#define Clock_setting_time_col 2
#define CLOCK_SETTING_TIME_HOUR_D1_COL 2
#define CLOCK_SETTING_TIME_HOUR_D2_COL 3
#define CLOCK_SETTING_TIME_MIN_D1_COL 5
#define CLOCK_SETTING_TIME_MIN_D2_COL 6
#define CLOCK_SETTING_TIME_SEC_D1_COL 8
#define CLOCK_SETTING_TIME_SEC_D2_COL 9



$declare${HSMs::Clock_Alarm_Ctor}

extern QHsm* Clock_Alarm_super;




#endif</text>
   </file>
  </directory>
 </package>
</model>
